# This is a basic workflow to tests all preset MUMPS versions with mumpspy

name: CI-Ubuntu_tests

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ '*' ]
    paths-ignore:         # Don't trigger on files that are updated by the CI
      - README.md
  pull_request:
    branches: [ '*' ]
  schedule:
    # * is a special character in YAML so you have to quote this string
    # run at 02:01 on every 15th day-of-month.
    - cron:  '1 2 */15 * *'
    
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.8, 3.9, '3.10', '3.11', '3.12', '3.13']
        mumps-version: [5.4.1, 5.5.0, 5.5.1, 5.6.0, 5.6.1, 5.6.2, 5.7.0, 5.7.1, 5.7.2, 5.7.3 ] 
        #5.4.0 is not available

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@main
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@main
      with:
        python-version: ${{ matrix.python-version }}

    - name: Create NOK badge
      uses: RubbaBoy/BYOB@v1.3.0
      with:
        NAME: Macos-${{ matrix.python-version }}_${{ matrix.mumps-version }}
        STATUS: NOK
        ICON: 'ðŸ”§'
        COLOR: FF1100
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Install the dependences
      run: |              
        # install ubuntu package
        sudo apt-get update
        sudo apt-get install -yy build-essential wget cmake gcc g++ gfortran libblas-dev liblapack-dev libopenmpi-dev
        # update pip
        python -m pip install --upgrade pip
    
    - name: Prepare folders and set variables
      run: |
        TMP_FOLDER_MUMPS_SRC=$(mktemp -d)
        BASE_DATA_PYTHON=$(python -c "from sysconfig import get_paths;print(get_paths()['data'])")
        echo $TMP_FOLDER_MUMPS_SRC
        echo $BASE_DATA_PYTHON
        echo "TMP_FOLDER_MUMPS_SRC=$TMP_FOLDER_MUMPS_SRC" >> $GITHUB_ENV
        echo "BASE_DATA_PYTHON=$BASE_DATA_PYTHON" >> $GITHUB_ENV
              
    - name: Checkout MUMPS-cmake
      run : |
        git clone https://github.com/scivision/mumps $TMP_FOLDER_MUMPS_SRC 
    
    - name: Compile MUMPS with appropriate version
      run: |
        # get cwd
        cwd=$(pwd)
        echo $cwd
        # switch to tmporary dir
        echo $TMP_FOLDER_MUMPS_SRC 
        cd $TMP_FOLDER_MUMPS_SRC
        # generate building for library using cmake 
        cmake -Bbuild -DBUILD_SINGLE=on -DBUILD_DOUBLE=on -DBUILD_COMPLEX=on -DBUILD_COMPLEX16=on -DMUMPS_parallel=no -DBUILD_SHARED_LIBS=on -DMUMPS_UPSTREAM_VERSION=${{ matrix.mumps-version }} --install-prefix=${BASE_DATA_PYTHON}
        # build library using cmake
        cmake --build build -j20
        # install library using cmake
        cmake --install build
        # return to initial folder
        cd $cwd
    
    - name: Install mumpspy
      run: |
        # install coverage adn pytest extensions
        pip install coverage pytest-xdist pytest-cov
        # install mumpspy
        pip install .
        # show MUMPS version
        python -c "from mumpspy import mumpspy;print(mumpspy.get_lib_version())"
    - name: Test with pytest  
      run: |  
        pytest --cov  -v -s -n1
    # - name: Generate Coverage Report  
    #   run: |  
    #     coverage report -m
    - name: Create OK badge
      uses: RubbaBoy/BYOB@v1.3.0
      with:
        NAME: ${{ matrix.python-version }}_${{ matrix.mumps-version }}
        STATUS: OK
        ICON: 'ðŸ”§'
        COLOR: 00FF00
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    